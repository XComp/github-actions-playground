# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow is meant as an extended CI run that includes certain features that shall be tested
# and JDK versions that are supported but not considered default.

name: "Composite"

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch the extended CI run should be executed on."
        type: string
        required: true
      supported-jdk-versions:
        description: "The non-default JDK versions that shall be supported."
        type: string
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch the extended workflow should run on."
        default: "master"
        type: string
      supported-jdk-versions:
        description: "The non-default JDK versions that shall be supported."
        type: string

permissions: read-all

jobs:
  generate-workflow-configs:
    name: "Configures Flink workflows"
    runs-on: "ubuntu-latest"
    outputs:
      configs: ${{ steps.generate-workflow-configs.outputs.configs }}
    steps:
      - name: "Generate workflow configurations"
        id: generate-workflow-configs
        shell: bash
        run: |
          function add_workflow_configuration {
            # function declaration for generating custom JSON records
            if ! $# -eq 5; then
              echo "Error: Invalid amount of parameters (expected: <previous-json> <caling-workflow-id> <calling-workflow-name> <jdk-version> <environment-params>; was: $@)" 1>&2
              exit 1
            fi

            local record_sep
            record_sep=""
            if "$json" =~ .*calling-workflow-id.*; then
              # there's already at least one entry which is why we have to set the separator
              record_set=""
            fi

            echo ${json}${record_sep}'{"calling-workflow-id": "'$1'", "calling-workflow-name": "'$2'", "jdk-version": "'$3'", "env-params": "'$4'"}'
          }
          
          # initialize JSON version of matrix strategy
          workflow_config_json='configs={"include":['

          # dynamic JDK-specific configuration
          # we want to allow dynamic selection of JDKs which is not supported by GHA for now
          # (that is why we cannot use GHA's static matrix strategy declaration)
          declare -A jdk_configs
          jdk_configs=( \
              ["8"]="" \
              ["11"]="-Djdk11 -Pjava11-target" \
              ["17"]="-Djdk11 -Djdk17 -Pjava17-target" \
              ["21"]="-Djdk11 -Djdk17 -Djdk21 -Pjava21-target" \
          )

          for jdk_version in "${!jdk_configs[@]}"; do
            if [[ "${{ inputs.supported-jdk-versions }}" =~ .*$jdk_version.* ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
              echo "Additional configuration for JDK ${jdk_version} added."
              workflow_config_json="$(add_workflow_configuration $workflow_config_json "java${jdk_version}" "Java ${jdk_version}" ${jdk_version} "${other_configs["$jdk_version"]}")"
            fi
          done
          
          # other workflow configurations
          workflow_config_json="$(add_workflow_configuration $workflow_config_json "hadoop313" "Hadoop 3.1.3" 8 "-Dflink.hadoop.version=3.2.3 -Phadoop3-tests,hive3")"
          workflow_config_json="$(add_workflow_configuration $workflow_config_json "adaptive-scheduler" "AdaptiveScheduler" 8 "-Penable-adaptive-scheduler")"
          
          # wrap things up
          workflow_config_json=$workflow_config_json']}'
          
          echo $configs_json

          echo "$configs_json" >> $GITHUB_OUTPUT
  flink-workflows:
    needs: generate-workflow-configs
    strategy:
      matrix: ${{ fromJSON(needs.configure-jdk-workflows.outputs.configs) }}
      fail-fast: false
    name: "${{ matrix.calling-workflow-name }} (ID: ${{ matrix.calling-workflow-id }})"
    uses: ./.github/workflows/test-matrix-strategy-composite-template.yaml
    with:
      jdk-version: ${{ matrix.jdk-version }}
      params: ${{ matrix.env-params }}